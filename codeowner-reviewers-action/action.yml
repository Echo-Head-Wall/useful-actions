name: 'Get CODEOWNER reviewers'
description: 'Gets the CODEOWNER reviewers for changed files in a PR and posts them as a comment'
permissions:
  contents: read
  pull-requests: write
  issues: write
inputs:
  github_token:
    description: 'GitHub token with required permissions'
    required: true
    default: ${{ github.token }}
  custom_message:
    description: 'Optional custom message to include in the comment'
    required: false
    default: ''
  codeowners_path:
    description: 'Path to the CODEOWNERS file'
    required: false
    default: '.github/CODEOWNERS'
  security_reviewers:
    description: 'Comma-separated list of security reviewers to include'
    required: false
    default: ''
outputs:
  reviewers:
    description: 'List of reviewers found for the changed files'
    value: ${{ steps.get-reviewers.outputs.reviewers }}

runs:
  using: "composite"
  steps:
    - name: Debug workspace
      shell: bash
      run: |
        echo "Workspace directory:"
        ls -la
        echo ""
        echo "GitHub directory:"
        ls -la .github || echo ".github not found"
        echo ""
        echo "CODEOWNERS file:"
        cat .github/CODEOWNERS || echo "CODEOWNERS not found in .github"
        
    - name: Get CODEOWNERS reviewers
      id: get-reviewers
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const path = require('path');

          // Get changed files in the PR
          console.log('Getting changed files in PR...');
          const { data: changedFiles } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          console.log(`Found ${changedFiles.length} changed files in PR #${context.issue.number}`);
          
          // Read CODEOWNERS file directly from filesystem
          let codeownersContent = '';
          let codeownersPath = '';
          
          console.log('Looking for CODEOWNERS file...');
          
          // Try common locations directly
          const possiblePaths = [
            '.github/CODEOWNERS',
            'CODEOWNERS',
            'docs/CODEOWNERS',
            '.gitlab/CODEOWNERS'
          ];
          
          // First check if the input path exists
          const inputPath = core.getInput('codeowners_path');
          if (inputPath && inputPath.trim() !== '') {
            possiblePaths.unshift(inputPath);
          }
          
          // Try each path
          let found = false;
          for (const pathToTry of possiblePaths) {
            console.log(`Checking for CODEOWNERS at: ${pathToTry}`);
            try {
              if (fs.existsSync(pathToTry)) {
                console.log(`Found CODEOWNERS at: ${pathToTry}`);
                codeownersContent = fs.readFileSync(pathToTry, 'utf8');
                codeownersPath = pathToTry;
                found = true;
                break;
              }
            } catch (e) {
              console.log(`Error checking ${pathToTry}: ${e.message}`);
            }
          }
          
          if (!found) {
            const errorMsg = 'CODEOWNERS file not found in any standard location';
            console.error(errorMsg);
            
            try {
              console.log('Attempting to post comment about missing CODEOWNERS file...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ‚ö†Ô∏è CODEOWNERS Error\n\n${errorMsg}\n\nPlease check the GitHub Actions logs for more details.`
              });
            } catch (commentError) {
              console.error(`Failed to post comment: ${commentError.message}`);
              console.error(`Error details: ${JSON.stringify(commentError, null, 2)}`);
            }
            
            core.setFailed(errorMsg);
            core.setOutput('reviewers', '');
            return;
          }
          
          console.log(`Successfully read CODEOWNERS file from ${codeownersPath}`);
          console.log(`File size: ${codeownersContent.length} bytes`);
          
          // Parse CODEOWNERS file and create path patterns
          const reviewers = new Set();
          const codeownerRules = [];
          
          codeownersContent.split('\n').forEach(line => {
            if (line && !line.startsWith('#')) {
              const [pattern, ...owners] = line.trim().split(/\s+/);
              if (pattern && owners.length > 0) {
                codeownerRules.push({
                  pattern: pattern,
                  owners: owners.filter(owner => owner.startsWith('@'))
                });
              }
            }
          });
          
          console.log(`Parsed ${codeownerRules.length} rules from CODEOWNERS file`);
          
          // Sort rules by specificity (most specific first)
          codeownerRules.sort((a, b) => {
            const aDepth = a.pattern.split('/').length;
            const bDepth = b.pattern.split('/').length;
            return bDepth - aDepth;
          });
          
          // For each changed file, find matching CODEOWNERS rules
          changedFiles.forEach(file => {
            const filePath = file.filename;
            for (const rule of codeownerRules) {
              // Convert glob pattern to regex
              const pattern = rule.pattern
                .replace(/\*/g, '.*')
                // Convert single character wildcard ? to match any single character
                .replace(/\?/g, '.')
                // Preserve opening square bracket for character sets
                .replace(/\[/g, '[')
                // Preserve closing square bracket for character sets
                .replace(/\]/g, ']');
              const regex = new RegExp(`^${pattern}$`);
              
              if (regex.test(filePath)) {
                rule.owners.forEach(owner => reviewers.add(owner));
                break; // Stop at first match (most specific rule)
              }
            }
          });
          
          console.log(`Found ${reviewers.size} reviewers for the changed files`);
          
          // Format the message
          const customMessage = core.getInput('custom_message');
          const securityReviewers = core.getInput('security_reviewers') ? core.getInput('security_reviewers').split(',').map(r => r.trim()) : [];
          
          // Separate regular reviewers from security reviewers
          const regularReviewers = new Set(Array.from(reviewers).filter(reviewer => !securityReviewers.includes(reviewer)));
          const codeownerSecurityReviewers = new Set(Array.from(reviewers).filter(reviewer => securityReviewers.includes(reviewer)));
          
          let message = `## üë• Required Reviewers\n\n`;
          
          if (regularReviewers.size > 0) {
            message += `### Reviewers for this PR:\n\n`;
            message += Array.from(regularReviewers).map(reviewer => `- ${reviewer}`).join('\n');
            message += '\n\n';
            message += `> üí° These reviewers were automatically assigned based on the files changed in this PR.\n`;
          } else if (codeownerSecurityReviewers.size === 0) {
            message += `> ‚ö†Ô∏è No CODEOWNERS found for the changed files in this PR.\n`;
            message += `> Please ensure you have a CODEOWNERS file set up in your repository.\n\n`;
          }
          
          if (codeownerSecurityReviewers.size > 0 || securityReviewers.length > 0) {
            message += `\n## üîí Security Approval Required\n\n`;
            message += `### Security Reviewers:\n\n`;
            
            // Add security reviewers from CODEOWNERS
            if (codeownerSecurityReviewers.size > 0) {
              message += `#### From CODEOWNERS:\n\n`;
              message += Array.from(codeownerSecurityReviewers).map(reviewer => `- ${reviewer}`).join('\n');
              message += '\n\n';
            }
            
            // Add additional security reviewers
            const additionalSecurityReviewers = securityReviewers.filter(reviewer => !codeownerSecurityReviewers.has(reviewer));
            if (additionalSecurityReviewers.length > 0) {
              message += `#### Additional Security Reviewers:\n\n`;
              message += additionalSecurityReviewers.map(reviewer => `- ${reviewer}`).join('\n');
              message += '\n\n';
            }
            
            message += `> ‚ö° Security review is required for this PR. Please ensure all security reviewers approve the changes.\n\n`;
          }
          
          if (customMessage) {
            message += `\n### ‚ÑπÔ∏è Info\n\n${customMessage}\n\n`;
          }
          
          message += `\n---\n`;
          message += `*This comment was automatically generated by the CODEOWNERS Reviewers action*`;
          
          // Post comment
          try {
            console.log('Posting comment to PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
            console.log('Successfully posted comment');
          } catch (commentError) {
            console.error(`Error posting comment: ${commentError.message}`);
            console.error(`Error status: ${commentError.status}`);
            console.error(`Error details: ${JSON.stringify(commentError, null, 2)}`);
            core.setFailed(`Failed to post comment: ${commentError.message}`);
          }
          
          // Set output
          core.setOutput('reviewers', Array.from(reviewers).join(','));
